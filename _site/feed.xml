<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning Haskell</title>
    <description>Learning Haskell for fun</description>
    <link>http://eva-villarroya.github.io/</link>
    <atom:link href="http://eva-villarroya.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 10 Jul 2015 16:32:00 +0200</pubDate>
    <lastBuildDate>Fri, 10 Jul 2015 16:32:00 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>R project</title>
        <description>&lt;p&gt;I have spent some time learning Haskell, as you can see in my &lt;a href=&quot;https://gist.github.com/eva-villarroya&quot;&gt;gists&lt;/a&gt;. Now I decided to explore other tools for a common problem I found at work, data loads.&lt;/p&gt;

&lt;p&gt;While is plenty of tools out there, I haven't really found a solution for data subsets. I have heard many good things about R, so I will investigate it.&lt;/p&gt;

&lt;p&gt;For now, I have installed it, set it up and started playing loading data from a JSON file.&lt;/p&gt;

&lt;p&gt;I have installed it from the Ubuntu package manager, as explained in &lt;a href=&quot;http://cran.r-project.org/bin/linux/ubuntu/README&quot;&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start it just type 'R' in the command line, and the interactive session begins. I have found &lt;a href=&quot;http://math.usask.ca/~longhai/doc/others/R-tutorial.pdf&quot;&gt;this document&lt;/a&gt; very concise to start with.&lt;/p&gt;

&lt;p&gt;I installed some additional packages to deal with JSON, as explained &lt;a href=&quot;http://gastonsanchez.com/work/webdata/getting_web_data_r5_json_data.pdf&quot;&gt;here&lt;/a&gt;. It's easier if you use the command in R as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
install.packages('RMySQL', repos='http://cran.us.r-project.org')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got a big data set from &lt;a href=&quot;http://bulk.openweathermap.org/sample/&quot;&gt;here&lt;/a&gt;, for now just the list of cities. &lt;/p&gt;

&lt;p&gt;Here comes some details about the data load into R:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; R

R version 3.2.1 (2015-06-18) -- &quot;World-Famous Astronaut&quot;
[... some lines removed here ...]

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&amp;gt; library(jsonlite)

Attaching package: ‘jsonlite’

The following object is masked from ‘package:utils’:

    View

&amp;gt; json_file &amp;lt;- &quot;city.list.json&quot;
&amp;gt; dat &amp;lt;- fromJSON(sprintf(&quot;[%s]&quot;, paste(readLines(json_file), collapse=&quot;,&quot;)))
&amp;gt; dim(dat)
[1] 209579      4
&amp;gt; head(dat)
      _id             name country coord.lon coord.lat
1  707860           Hurzuf      UA  34.28333  44.55000
2  519188          Novinki      RU  37.66667  55.68333
3 1283378           Gorkhā      NP  84.63333  28.00000
4 1270260 State of Haryāna      IN  76.00000  29.00000
5  708546        Holubynka      UA  33.90000  44.60000
6 1283710     Bāgmatī Zone      NP  85.41666  28.00000
&amp;gt; q()
Save workspace image? [y/n/c]: n

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can perform SQL-like operations in R data frames, like filtering by some condition (I also used function head to show the first elements, since the data set is big):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; head(dat[grep(&quot;es&quot;, dat$country, ignore.case=T),])
        _id                    name country coord.lon coord.lat
108 3113208 Provincia de Pontevedra      ES  -8.50000  42.50000
229 6361023                   Osuna      ES  -5.11371  37.22229
230 6361010            Lora del Río      ES  -5.48845  37.66015
231 6359459              Fuengirola      ES  -4.61206  36.55149
232 6358465                  Bailén      ES  -3.78418  38.08023
233 6362958                   Utebo      ES  -1.00454  41.71559
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON data structures often contain nested structures, which in R would be loaded as nested data frames. The cities data I loaded contains coordinates as a nested object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; dim(dat)
[1] 209579      4
&amp;gt; sapply(dat, class)
         _id         name      country        coord 
   &quot;integer&quot;  &quot;character&quot;  &quot;character&quot; &quot;data.frame&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To flatten such structures I created a shorthand for the nested data frame, then I used cbind to append the nested object columns to the main object columns all into a new data frame, where data looks the same but now with a flat data structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; coord = dat$coord
&amp;gt; cities &amp;lt;- cbind(dat[, c(&quot;_id&quot;, &quot;name&quot;, &quot;country&quot;)], coord[, c(&quot;lon&quot;, &quot;lat&quot;)])
&amp;gt; dim(cities)
[1] 209579      5
&amp;gt; sapply(cities, class)
        _id        name     country         lon         lat 
  &quot;integer&quot; &quot;character&quot; &quot;character&quot;   &quot;numeric&quot;   &quot;numeric&quot;
&amp;gt; head(cities[grep(&quot;es&quot;, cities$country, ignore.case=T),])
          _id                    name country      lon      lat
  108 3113208 Provincia de Pontevedra      ES -8.50000 42.50000
  229 6361023                   Osuna      ES -5.11371 37.22229
  230 6361010            Lora del Río      ES -5.48845 37.66015
  231 6359459              Fuengirola      ES -4.61206 36.55149
  232 6358465                  Bailén      ES -3.78418 38.08023
  233 6362958                   Utebo      ES -1.00454 41.71559
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar approach could be used to create two data frames, one for cities and another for coordinates, just making sure both have a key column in common.&lt;/p&gt;

&lt;p&gt;A very interesting plugin for R, sqldf, allows to run SQL on data frames.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; head(sqldf(&quot;select country, count(*) as count from cities where country is not null group by country order by count desc&quot;))
  country count
1      DE 28786
2      US 19972
3      FR 19965
4      ES 15439
5      IT  9878
6      RU  8768
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, is very easy to visualize data with plots:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; DF=sqldf(&quot;select country from cities where country is not null&quot;)
&amp;gt; ggplot(data=DF, aes(DF$country)) + geom_histogram(breaks=seq(20, 50, by =2), col=&quot;red&quot;, aes(fill=..count..)) + scale_fill_gradient(&quot;Count&quot;, low = &quot;green&quot;, high = &quot;red&quot;) + labs(title=&quot;Histogram for Cities&quot;)  + labs(x=&quot;Country&quot;, y=&quot;Count&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also the plot can be saved to a file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; citiesHistogram &amp;lt;- ggplot(data=DF, aes(DF$country)) + geom_histogram(breaks=seq(20, 50, by =2), col=&quot;red&quot;, aes(fill=..count..)) + scale_fill_gradient(&quot;Count&quot;, low = &quot;green&quot;, high = &quot;red&quot;) + labs(title=&quot;Histogram for Cities&quot;)  + labs(x=&quot;Country&quot;, y=&quot;Count&quot;)
&amp;gt; ggsave(filename=&quot;citiesHistogram.png&quot;, plot=citiesHistogram)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/citiesHistogram.png&quot; alt=&quot;Cities histogram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While all this says nothing about the capabilities I am specifically looking for in this tool. So far, if you want a tool to explore data and extract metrics, I think R is a good tool. Is not hard to get hands on, you can do as much as the above in less than a working day.&lt;/p&gt;

&lt;p&gt;Will come back another day with creating subsets and exporting data.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 14:00:00 +0200</pubDate>
        <link>http://eva-villarroya.github.io/2015/07/10/rproject/</link>
        <guid isPermaLink="true">http://eva-villarroya.github.io/2015/07/10/rproject/</guid>
        
        
      </item>
    
      <item>
        <title>Initial setup</title>
        <description>&lt;p&gt;I decided to learn functional programming, and here come my very first steps.&lt;/p&gt;

&lt;p&gt;First, I made decision about what functional programming language to learn. After doing some research about few of them, Lisp, Python and Haskell, I chose the last one. For no special reason, really, it looked cool and enough resources are available.&lt;/p&gt;

&lt;p&gt;Then, I also decided to blog about my learning process, for my record, and just in case it could help anyone else out there. I had to think about a blogging platform or tools. I decided to go for &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; and &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;Jekyll&lt;/a&gt;. This combination of tools, despite requiring more effort compared to a fully hosted solution, I think would be more flexible and maybe I could learn something by the way.&lt;/p&gt;

&lt;p&gt;While both Github pages and Jekyll do have good documentation and is very easy to start with them, even if frontend is not really my thing. Still I found a couple of issues.&lt;/p&gt;

&lt;p&gt;I am using Ubuntu, and while trying to install Jekyll I got some error messages and it failed to install. I could solved quite easy following &lt;a href=&quot;http://stackoverflow.com/questions/13767725/unable-to-install-gem-failed-to-build-gem-native-extension-cannot-load-such&quot;&gt;this explanation&lt;/a&gt;, installing ruby-dev.&lt;/p&gt;

&lt;p&gt;Once I had Jekyll installed locally, still I had issues trying to run the server. It was complaining no Javascript runtime was found. I checked &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/2327&quot;&gt;this thread&lt;/a&gt; about same issue, and for me installing therubytracer worked just fine.&lt;/p&gt;

&lt;p&gt;After having Jekyll up and running, I chose a &lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog-jekyll&quot;&gt;blog template&lt;/a&gt; and added some nice &lt;a href=&quot;https://highlightjs.org/&quot;&gt;code formatting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally, the good stuff can start, my first contact with Haskell. I am using a couple of books, &lt;a href=&quot;http://book.realworldhaskell.org/&quot;&gt;Real world Haskell&lt;/a&gt; and &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn you a Haskell for great good&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have just gone through the first chapter of each book, and I am already glad I have chosen Haskell. The code is compact and expressful; specially compared to Java.&lt;/p&gt;

&lt;p&gt;I will be posting my code to GitHub, either as project or for simple things as a Gist. For those looking for the exercise solution at the end of the first chapter of Real world Haskell, you can check it out &lt;a href=&quot;https://gist.github.com/eva-villarroya/7d3ea3b6ac628a2b876c&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am using gist from the command line, and since it required some trial and error, here comes a compilation of useful commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash CamingoCode-Bold&quot;&gt;
&amp;gt; gist --login
Obtaining OAuth2 access_token from github.
GitHub username: eva-villarroya
GitHub password: 
Success! https://github.com/settings/applications
&amp;gt; gist WC.hs
https://gist.github.com/1fe0cef32f88f83e0e61
&amp;gt; gist -u 7d3ea3b6ac628a2b876c WC.hs
https://gist.github.com/7d3ea3b6ac628a2b876c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how after commiting for first time, an identifier is returned as part of the gist URL. From there on, that file can be updated by referencing that same id. If no id is supplied, a different gist is created.&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Apr 2015 14:00:00 +0200</pubDate>
        <link>http://eva-villarroya.github.io/2015/04/07/setup/</link>
        <guid isPermaLink="true">http://eva-villarroya.github.io/2015/04/07/setup/</guid>
        
        
      </item>
    
  </channel>
</rss>
